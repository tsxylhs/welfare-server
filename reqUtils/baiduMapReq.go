package reqUtils

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"lottery/welfare/model"
	"lottery/welfare/reqUtils/reqModel"
	"net/http"
	"net/url"
)

var (
	baiduMapUrl = "https://api.map.baidu.com/geocoding/v3/?address=%s&output=json&ak=W38adlUvhvj6WhWn3AYGIOaOjIRIP4d5"
)

type baiduMap int

var BaiduMap baiduMap

func (baiduMap) BaiduMapAddrToLat(lotteryStation *model.LotteryStation) {
	url := fmt.Sprintf(baiduMapUrl, lotteryStation.Location)
	fmt.Print(url)
	resp, err := getBaiDuMap(url)
	if err != nil {
		log.Print("err", err.Error())
	}
	autoGeneratedMap := &reqModel.AutoGeneratedMap{}
	err = json.Unmarshal(resp, autoGeneratedMap)
	if err != nil {
		log.Print("err", err.Error())
	}
	lotteryStation.Lng = autoGeneratedMap.Result.Location.Lng
	lotteryStation.Lat = autoGeneratedMap.Result.Location.Lat
	if err != nil {
		log.Print("获取经纬度失败")
	}
	log.Print("resp", resp)

}
func getBaiDuMap(path string) (respResult []byte, err error) {
	Url, err := url.Parse(path)
	if err != nil {
		panic(err.Error())
	}
	urlPath := Url.String()
	resp, err := http.Get(urlPath)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()
	respByte, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}
	return respByte, nil

}
